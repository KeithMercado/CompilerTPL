package Compiler;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
//import java.awt.event.*;

public class DisplayCompiler extends JFrame {
    String contents = "none";
    List<String> tokens = new ArrayList<String>(); ;
    List<String> fileCode = new ArrayList<String>();

    public DisplayCompiler() {
        initComponents();
    }

    private void initComponents() {
        JTextArea outputAreaText = new JTextArea();
        CurvedTextField resultField = new CurvedTextField();

        setTitle("Mini Compiler");
        setSize(new Dimension(1280, 720)); // Set window size to 1280x720
        setLocationRelativeTo(null); // Center the window
        setResizable(false);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Main panel with BorderLayout
        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.setBackground(Color.decode("#031716"));
        setContentPane(mainPanel);

        // Header Panel
        JPanel headerPanel = new JPanel();
        headerPanel.setBackground(Color.decode("#031716"));
        headerPanel.setPreferredSize(new Dimension(1280, 60));
        headerPanel.setLayout(new FlowLayout(FlowLayout.CENTER));
        JLabel headerLabel = new JLabel("Mini Compiler");
        headerLabel.setFont(new Font("Arial", Font.BOLD, 20));
        headerLabel.setForeground(Color.WHITE);
        headerPanel.add(headerLabel);
        headerPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 0, 25));
        mainPanel.add(headerPanel, BorderLayout.NORTH);

        // Footer Panel
        JPanel footerPanel = new JPanel();
        footerPanel.setBackground(Color.decode("#031716"));
        footerPanel.setPreferredSize(new Dimension(1280, 60));
        footerPanel.setLayout(new FlowLayout(FlowLayout.CENTER));
        JLabel footerLabel = new JLabel("Â© 2024 Mini Compiler | Bulatao, Daanoy, Mercado");
        footerLabel.setFont(new Font("Arial", Font.PLAIN, 14));
        footerLabel.setForeground(Color.WHITE);
        footerPanel.add(footerLabel);
        mainPanel.add(footerPanel, BorderLayout.SOUTH);

        // Left Sidebar Panel
        JPanel sidebar = new JPanel(new GridLayout(5, 1, 20, 20));
        sidebar.setBackground(Color.decode("#031716"));
        sidebar.setPreferredSize(new Dimension(250, 0));
        sidebar.setBorder(BorderFactory.createEmptyBorder(20, 15, 20, 15));
        mainPanel.add(sidebar, BorderLayout.WEST);

        String[] buttons = {"Open File", "Lexical Analysis", "Syntax Analysis", "Semantic Analysis", "Clear"};

        for (String buttonText : buttons) {
            RoundedStud buttonPanel = new RoundedStud(buttonText);

            buttonPanel.addActionListener(e -> {
                // Handle button click here
                System.out.println(buttonText + " clicked");
                // add specific actions
                if ("Open File".equals(buttonText)) {
                    // Handle Open File action
                    fileCode = openFile();
                    contents = convertListToString(fileCode);
                    outputAreaText.setText(contents);
                } else if ("Lexical Analysis".equals(buttonText)) {
                    // Handle Lexical Analysis action
                    tokens = lexical(fileCode);
                    StringBuilder mergedTokens = new StringBuilder();

                    for (String tokenline : tokens)
                    {
                        mergedTokens.append(tokenline).append("\n");
                    }
                    resultField.setText("Lexical Analysis Successful!");
                    JOptionPane.showMessageDialog(null, mergedTokens.toString(), "Success", JOptionPane.INFORMATION_MESSAGE);

                } else if ("Syntax Analysis".equals(buttonText)) {
                    // Handle Syntax Analysis action
                    boolean parser = syntax(tokens);
                    if (parser)
                    {
                        resultField.setText("Syntax Analysis Successful!");
                    }
                    else {
                        resultField.setText("Syntax Error!");
                        JOptionPane.showMessageDialog(null, "A Syntax Error has occurred!", "Syntax Error", JOptionPane.ERROR_MESSAGE);
                    }

                } else if ("Semantic Analysis".equals(buttonText)) {
                    // Handle Semantic Analysis action
                    String typeCheck = semantic(fileCode);
                    resultField.setText(typeCheck);

                    if ("Semantically Incorrect!".equals(typeCheck)) {
                        JOptionPane.showMessageDialog(null, "A Semantic Error has occurred!", "Semantic Error", JOptionPane.ERROR_MESSAGE);
                    }

                } else if ("Clear".equals(buttonText)) {
                    // Handle Clear action
                    contents = "none";
                    tokens = new ArrayList<String>(); ;
                    fileCode = new ArrayList<String>();
                    outputAreaText.setText("");
                    resultField.setText("");
                }
            });

            sidebar.add(buttonPanel);
        }

        // Center Panel for Output Display and Result
        JPanel centerPanel = new JPanel();
        centerPanel.setBackground(Color.decode("#031716"));
        centerPanel.setLayout(new BorderLayout());
        mainPanel.add(centerPanel, BorderLayout.CENTER);

        // Output Area
        JTextArea outputArea = new JTextArea();
        outputArea.setBackground(Color.decode("#C0C0C0"));
        outputArea.setForeground(Color.WHITE);
        outputArea.setFont(new Font("Monospaced", Font.PLAIN, 14));
        outputArea.setEditable(false);

        // JScrollPane for Output Area
        JScrollPane outputScrollPane = new JScrollPane(outputArea);
        outputScrollPane.setBorder(BorderFactory.createEmptyBorder(20, 10, 10, 20));
        outputScrollPane.setBackground(Color.decode("#031716"));
        centerPanel.add(outputScrollPane, BorderLayout.CENTER);

        outputScrollPane.setViewportView(outputAreaText);

        //file contents area
        outputAreaText.setEditable(false);
        outputAreaText.setLineWrap(true);
        outputAreaText.setFont(new Font("Monospaced", Font.BOLD, 12));

        outputScrollPane.setPreferredSize(new Dimension(0, 400));

        // Result Panel (below the output area)
        JPanel resultPanel = new JPanel();
        resultPanel.setBackground(Color.decode("#031716"));
        resultPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 22, 20));
        resultPanel.setPreferredSize(new Dimension(0, 100));
        resultPanel.setLayout(new BoxLayout(resultPanel, BoxLayout.Y_AXIS));
        centerPanel.add(resultPanel, BorderLayout.SOUTH);

        // Result Label
        JLabel resultLabel = new JLabel("Result");
        resultLabel.setFont(new Font("Monospaced", Font.BOLD, 12));
        resultLabel.setForeground(Color.WHITE);
        resultLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        resultPanel.add(resultLabel);

        // Result Field
        resultField.setBackground(Color.decode("#C0C0C0"));
        resultField.setForeground(Color.BLACK);
        resultField.setFont(new Font("Arial", Font.PLAIN, 14));
        resultField.setEditable(false);
        resultField.setAlignmentX(Component.LEFT_ALIGNMENT);
        resultField.setFont(new Font("Monospaced", Font.PLAIN, 14));
        resultPanel.add(resultField);


    }

    public List<String> openFile()
    {
        JFileChooser chooseFile = new JFileChooser();

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Java & Text Files", "java", "txt");
        chooseFile.setFileFilter(filter);

        int result = chooseFile.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION)
        {
            File selectedFile = chooseFile.getSelectedFile();

            // Read and display the contents of the file
            fileCode = displayContents(selectedFile);
        }
        return fileCode;

    }
    private List<String> displayContents(File file)
    {
        try
        {
            // FileReader reads files
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader);

            // Read the file line by line
            String line;
            while ((line = bufferedReader.readLine()) != null)
            {
                fileCode.add(line);
            }

            contents = fileCode.toString();
            bufferedReader.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        return fileCode;
    }

    private String convertListToString(List<String> list)
    {
        return String.join("\n", list);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            DisplayCompiler app = new DisplayCompiler();
            app.setVisible(true);
        });
    }

    public List<String> lexical(List<String> input)
    {
        String[] dataTypes = {"int", "double", "char", "String", "boolean"};
        String[] booleans = {"true", "false"};
        String identifier = "[a-zA-Z_][a-zA-Z0-9_]*";
        String value = "\"(?:[^\"\\\\]|\\\\.)*\"|'[^']*'|\\d+(\\.\\d+)?";
        String[] operator = {"="};
        String[] delimiter = {";"};

        Pattern stringPattern = Pattern.compile("\"[^\"]*\"");

        List<String> output = new ArrayList<>();

        Pattern pattern = Pattern.compile("(" + identifier + "|" + value + "|.)");

        for (String statement : input)
        {
            Matcher matcher = pattern.matcher(statement);
            StringBuilder token = new StringBuilder("");
            while (matcher.find())
            {
                String lexeme = matcher.group();
                if (isInArray(lexeme, dataTypes))
                {
                    token.append("<data_type> ");
                }
                else if (isInArray(lexeme, operator))
                {
                    token.append("<assignment_operator> ");
                }
                else if (isInArray(lexeme, booleans))
                {
                    token.append("<value> ");
                }
                else if (lexeme.matches(identifier))
                {
                    token.append("<identifier> ");
                }
                else if (stringPattern.matcher(lexeme).matches())
                {
                    token.append("<value> ");
                }
                else if (lexeme.matches(value))
                {
                    token.append("<value> ");
                }
                else if (isInArray(lexeme, delimiter))
                {
                    token.append("<delimiter> ");
                }
            }
            output.add(token.toString().trim());
        }

        return output;
    }

    private static boolean isInArray(String result, String[] array)
    {
        for (String item : array)
        {
            if (item.equals(result))
            {
                return true;
            }
        }
        return false;
    }

    public boolean syntax(List<String> parse)
    {
        String valid = "<data_type> <identifier> <assignment_operator> <value> <delimiter>";

        for (String line : parse)
        {
            if (!line.trim().equals(valid))
            {
                return false;
            }
        }

        return true;
    }

    public String semantic(List<String> lines)
    {
        boolean valid = true;

        for (String line : lines)
        {
            String result = semanticAnalysis(line);
            if (!result.equals("Semantic Analysis Successful!"))
            {
                valid = false;
                break;
            }
        }
        return valid ? "Semantic Analysis Successful!" : "Semantically Incorrect!";
    }

    public String semanticAnalysis(String line)
    {
        String result;
        line = line.trim();
        line = line.substring(0, line.length() - 1);

        String[] lineParts = line.split("=");

        String declaration = lineParts[0].trim();
        String value = lineParts[1].trim();

        String[] declarationParts = declaration.split(" ");

        String dataType = declarationParts[0];

        if (dataType.equals("int"))
        {
            try
            {
                Integer.parseInt(value);
                result = "Semantic Analysis Successful!";
            }
            catch (NumberFormatException e)
            {
                result = "Semantically Incorrect!";
            }
        }
        else if (dataType.equals("double"))
        {
            try
            {
                Double.parseDouble(value);
                result = "Semantic Analysis Successful!";
            }
            catch (NumberFormatException e)
            {
                result = "Semantically Incorrect!";
            }
        }
        else if (dataType.equals("String"))
        {
            if (value.startsWith("\"") && value.endsWith("\""))
            {
                result = "Semantic Analysis Successful!";
            }
            else
            {
                result = "Semantically Incorrect!";
            }
        }
        else if (dataType.equals("boolean"))
        {
            if (value.equals("true") || value.equals("false"))
            {
                result = "Semantic Analysis Successful!";
            }
            else
            {
                result = "Semantically Incorrect!";
            }
        }
        else if (dataType.equals("char"))
        {
            if ((value.startsWith("\'")  && value.endsWith("\'")) && value.length() == 3)
            {
                result = "Semantic Analysis Successful!";
            }
            else
            {
                result = "Semantically Incorrect!";
            }
        }
        else
        {
            result = "Invalid Input!";
        }

        return result;
    }
}
